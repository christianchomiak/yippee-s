<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = global.CountdownDepth;

countdownLength = 3;

timeUntilShow = 0.25;
currentTime = 0;

visible = false;

x = room_width * 0.5;
y = room_height * 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_enter)
{
    if global.CityManager.currentPhase == phase.init
    {    
        f_ChangePhase(phase.selection);
        instance_destroy();
        exit
    }
}

if !visible
{
    currentTime += f_GetDeltaTime();
    
    if currentTime &gt;= timeUntilShow
    {
        visible = true;
        currentTime = countdownLength;
    }
}
else
{
    currentTime -= f_GetDeltaTime();
    
    if currentTime &lt;= 0
    {
        currentTime = 0;
        f_ChangePhase(phase.selection);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(room_width * 0.5, room_height * 0.5, string(ceil(currentTime)));

draw_set_font(fnt_Countdown);
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
var Margin = 20;
var ButtonText = string(ceil(currentTime));

//Find the corners of our box
var BoxTop = y - (string_height(ButtonText) * 0.5)//- (Margin * 2.5)
var TextTop = BoxTop + (Margin * 2.5);
var BoxBottom = BoxTop + Margin + (string_height(ButtonText) * 0.5) + Margin;
var HalfTextWidth = string_width(ButtonText) * 0.5;
var BoxLeft = x - HalfTextWidth - (Margin * 2);
var BoxRight = x + HalfTextWidth + (Margin * 2);

draw_set_colour(make_colour_hsv(342,120,56)) //82

//draw_text_transformed(room_width * 0.5, room_height * 0.5, string(ceil(currentTime)), 2, 2, 0);

draw_set_alpha(0.9);
draw_rectangle(BoxLeft,BoxTop,BoxRight,BoxBottom,false);
draw_set_alpha(1);

draw_set_colour(c_white);

var CurrentY = TextTop;
f_DrawTextAndUpdateCurrentY(ButtonText, x, CurrentY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
