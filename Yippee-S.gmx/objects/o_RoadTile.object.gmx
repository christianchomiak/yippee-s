<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_RoadDummy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation

depth = global.CityManager.StreetDepth;
//IsSelected = false;

currentHighlightDirection = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.CityManager.UsingGPSView
    sprite_index = s_RoadDummy;
else
    sprite_index = s_Road;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !global.CityManager.IsSelectionPhase
    exit;

//Check if we are repeating a tile
var PathLength = ds_list_size(global.CityManager.SelectedPath);

if PathLength &gt; 0 and f_CheckIfTileIsInPath(self.id)
{
    f_DeletePathUntilTile(self.id);
}
else
{
    f_AddTileToPath(self.id);
}

exit;

//Check if we are visiting the penultimate tile
var PathLength = ds_list_size(global.CityManager.SelectedPath);
var LastIndex = PathLength - 1;

if PathLength &gt; 1
{
    var penultimateID = ds_list_find_value(global.CityManager.SelectedPath, LastIndex - 1);
    if penultimateID == self.id
    {
        f_RemoveLastTileFromPath();
    }
    else
    {
        f_AddTileToPath(self.id);
    }
}
else
{
    var lastID = ds_list_find_value(global.CityManager.SelectedPath, LastIndex);
    if lastID != self.id
    {
        f_AddTileToPath(self.id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if IsSelected
{
    var highlightIndex = 0;
    var highlightAngle = 0;
    switch currentHighlightDirection
    {
        case 258:
            highlightIndex = 5;
            highlightAngle = 0;
            break;
        case 456: 
            highlightIndex = 3;
            highlightAngle = 0;
            break;
        case 256:
            highlightIndex = 2;
            highlightAngle = 0;
            break;
        case 245:
            highlightIndex = 2;
            highlightAngle = 270;
            break;
        case 568:
            highlightIndex = 2;
            highlightAngle = 90;
            break;
        case 458:
            highlightIndex = 2;
            highlightAngle = 180;
            break;
        case 25:        
            highlightIndex = 1;
            highlightAngle = 270;
            break;
        case 45:
            highlightIndex = 1;
            highlightAngle = 180;
            break;
        case 56:
            highlightIndex = 1;
            highlightAngle = 0;
            break;
        case 58:
            highlightIndex = 1;
            highlightAngle = 90;
            break;
        default:
            highlightIndex = 0;
            highlightAngle = 0;
            break;    
    }
    draw_sprite_ext(s_Traffic, highlightIndex, x, y, image_xscale, image_yscale, highlightAngle, c_blue, 0.25);
}

draw_text(x, y, string(currentHighlightDirection));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
