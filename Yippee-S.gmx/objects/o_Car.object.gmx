<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_Car</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation

//depth = -5;
depth = global.GPSCarDepth;
image_speed = 0;

f_ResetCar(self.id, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.CityManager.UsingGPSView
{
    sprite_index = s_Car;
    image_xscale = (global.CityManager.CellSize / sprite_get_width(sprite_index)) * 0.15;  
    image_yscale = image_xscale;
    //depth = global.CityManager.GPSCarDepth;
}
else
{
    sprite_index = s_CarAlt;
    image_xscale = (global.CityManager.CellSize / sprite_get_width(sprite_index)) * 0.35; 
    image_yscale = image_xscale;
    
    //depth = global.CityManager.GPSCarDepth - (y / room_height);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.CityManager.IsSelectionPhase
    exit;

if keyboard_check(vk_shift)
    Turbo = 2;
else
    Turbo = 1;
    
if !HasArrived
{
    var PathLength = ds_list_size(global.CityManager.SelectedPath);
    
    if CurrentPathIndex &lt; 0 or CurrentPathIndex &gt;= PathLength
    {
        HasArrived = true;
        //show_message("ARRIVED");
        speed = 0;
        exit;
    }
    
    var currentTarget = ds_list_find_value(global.CityManager.SelectedPath, CurrentPathIndex);
  
    var vel = Velocity * Turbo; //128;
    var trafficMod = 1;
    var PossibleJam = instance_position(x, y, o_TrafficJam);
    
    switch(PossibleJam.TrafficLevel)
    {
        case 2:
            trafficMod = 0.5;
            break;
        case 4:
            trafficMod = 0.25;
            break;
        case 8:
            trafficMod = 0.125;
            break;
        default:
            trafficMod = 1;
            break;
    }
    
    if PossibleJam != noone
    {
        //vel = Velocity * (1.1 - PossibleJam.image_alpha); //32;
        vel *= trafficMod; //32;
    }    
    
    var dirX = currentTarget.x - x;
    var dirY = currentTarget.y - y;
    
    if sign(dirX) &lt; 0
        image_index = 2;
    else if sign(dirX) &gt; 0
        image_index = 0;
    else if sign(dirY) &lt; 0
        image_index = 1;
    else if sign(dirY) &gt; 0
        image_index = 3;
    
    //vspeed = sign(dirY) * vel;
    //hspeed = sign(dirX) * vel;
    
    global.CityManager.AccumulatedTime += f_GetDeltaTime() * Turbo;
    x += sign(dirX) * vel * f_GetDeltaTime();
    y += sign(dirY) * vel * f_GetDeltaTime();
    
    var newDirX = currentTarget.x - x;
    var newDirY = currentTarget.y - y;
    var distance = sqr((newDirX*newDirX) + (newDirY*newDirY));
    
    if (dirX &gt; 0 &amp;&amp; newDirX &lt; 0) or (dirY &gt; 0 &amp;&amp; newDirY &lt; 0) or distance &lt; vel * f_GetDeltaTime()
    {        
        x = currentTarget.x;
        y = currentTarget.y;
                  
        if (currentTarget.HasMarker)
        {
            f_ReachMarker(currentTarget.marker);        
        }
        
        CurrentPathIndex++;
        exit;
    }
    
    //move_towards_point(currentTarget.x, currentTarget.y, vel);
    
    /*if distance &lt; vel * f_GetDeltaTime()
    {
        x = currentTarget.x;
        y = currentTarget.y;
               
        if (currentTarget.HasMarker)
        {
            f_ReachMarker(currentTarget.marker);        
        }
        
        CurrentPathIndex++;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
