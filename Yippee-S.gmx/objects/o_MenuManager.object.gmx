<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -100;

f_GameVariablesInit();

if !audio_is_playing(a_BGM)
{
    audio_play_sound(a_BGM, 1, true);
    audio_sound_gain(a_BGM, 0.25, 0);
}

randomNumber = irandom_range(0, 9);


CityWidth = 0.75 * room_width;
CityHeight = 0.75 * room_height;
NumberOfRows = 4;
NumberOfColumns = 6;

CellSize = min(CityWidth / NumberOfColumns, CityHeight / NumberOfRows);

SideBorderSize = (room_width - NumberOfColumns * CellSize) * 0.5;
TopBorderSize = (room_height - NumberOfRows * CellSize) * 0.85;

StartingX = SideBorderSize;
StartingY = TopBorderSize;

carCol = irandom_range(0, NumberOfColumns - 1);
carRow = irandom_range(0, NumberOfRows - 1);
carPosX = f_PositionInWorld(StartingX, carCol, CellSize, true);
carPosY = f_PositionInWorld(StartingY, carRow, CellSize, true);

targetCarCol = carCol;
targetCarRow = carRow;

    if (targetCarCol == 0 and targetCarRow == 0)
    {
        if choose(true, false)
            targetCarCol += 1;  
        else
            targetCarRow += 1;    
    }
    else if (targetCarCol == 0 and targetCarRow == NumberOfRows - 1)
    {        
        if choose(true, false)
            targetCarCol += 1;  
        else
            targetCarRow -= 1;   
    }
    else if (targetCarCol == NumberOfColumns -1 and targetCarRow == 0)
    {        
        if choose(true, false)
            targetCarCol -= 1;  
        else
            targetCarRow += 1;   
    }
    else if (targetCarCol == NumberOfColumns -1 and targetCarRow == NumberOfRows - 1)
    {        
        if choose(true, false)
            targetCarCol -= 1;  
        else
            targetCarRow -= 1;   
    }
    else
    {
        if targetCarCol == 0            
            if choose(true, false)
                targetCarCol += 1;  
            else
                targetCarRow += choose(1, -1);
        else if targetCarCol == NumberOfColumns - 1            
            if choose(true, false)
                targetCarCol -= 1;  
            else
                targetCarRow += choose(1, -1);
        else if targetCarRow == 0            
            if choose(true, false)
                targetCarCol += choose(1, -1);  
            else
                targetCarRow += 1;
        else if targetCarRow == NumberOfRows - 1            
            if choose(true, false)
                targetCarCol += choose(1, -1);  
            else
                targetCarRow -= 1;
        else
        {
            if choose(true, false)
                targetCarCol += choose(1, -1);  
            else
                targetCarRow += choose(1, -1);
        }  
    }

car_image_index = 0;

menuCarTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard input
if keyboard_check_pressed(vk_escape)
{
    game_end();
}
else if keyboard_check_pressed(vk_enter)
{
    room_goto(1);
}
else if keyboard_check_pressed(ord('R'))
{
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var vel = CellSize * 0.75; //Velocity * Turbo; //128;

var dirX = targetCarCol - carCol;
var dirY = targetCarRow - carRow;

if sign(dirX) &lt; 0
    car_image_index = 2;
else if sign(dirX) &gt; 0
    car_image_index = 0;
else if sign(dirY) &lt; 0
    car_image_index = 1;
else if sign(dirY) &gt; 0
    car_image_index = 3;


menuCarTimer += f_GetDeltaTime();
carPosX += sign(dirX) * vel * f_GetDeltaTime();
carPosY += sign(dirY) * vel * f_GetDeltaTime();

var newDirX = f_PositionInWorld(StartingX, targetCarCol, CellSize, true) - carPosX;
var newDirY = f_PositionInWorld(StartingY, targetCarRow, CellSize, true) - carPosY;


var distance = sqr((newDirX*newDirX) + (newDirY*newDirY));
if (distance &lt; vel * f_GetDeltaTime()) or ((dirX &gt; 0 &amp;&amp; newDirX &lt; 0) or (dirY &gt; 0 &amp;&amp; newDirY &lt; 0))
{
    carCol = targetCarCol;
    carRow = targetCarRow;    

    carPosX = f_PositionInWorld(StartingX, carCol, CellSize, true);
    carPosY = f_PositionInWorld(StartingY, carRow, CellSize, true);
                   
    if (targetCarCol == 0 and targetCarRow == 0)
    {
        if choose(true, false)
            targetCarCol += 1;  
        else
            targetCarRow += 1;    
    }
    else if (targetCarCol == 0 and targetCarRow == NumberOfRows - 1)
    {        
        if choose(true, false)
            targetCarCol += 1;  
        else
            targetCarRow -= 1;   
    }
    else if (targetCarCol == NumberOfColumns -1 and targetCarRow == 0)
    {        
        if choose(true, false)
            targetCarCol -= 1;  
        else
            targetCarRow += 1;   
    }
    else if (targetCarCol == NumberOfColumns -1 and targetCarRow == NumberOfRows - 1)
    {        
        if choose(true, false)
            targetCarCol -= 1;  
        else
            targetCarRow -= 1;   
    }
    else
    {
        if targetCarCol == 0            
            if choose(true, false)
                targetCarCol += 1;  
            else
                targetCarRow += choose(1, -1);
        else if targetCarCol == NumberOfColumns - 1            
            if choose(true, false)
                targetCarCol -= 1;  
            else
                targetCarRow += choose(1, -1);
        else if targetCarRow == 0            
            if choose(true, false)
                targetCarCol += choose(1, -1);  
            else
                targetCarRow += 1;
        else if targetCarRow == NumberOfRows - 1            
            if choose(true, false)
                targetCarCol += choose(1, -1);  
            else
                targetCarRow -= 1;
        else
        {
            if choose(true, false)
                targetCarCol += choose(1, -1);  
            else
                targetCarRow += choose(1, -1);
        }  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

/*City*/
var CityGrid; // = ds_grid_create(NumberOfColumns, NumberOfRows);

for (var r = 0; r &lt; NumberOfRows; r++)
{
    for (var c = 0; c &lt; NumberOfColumns; c++)
    {
        var xx = f_PositionInWorld(StartingX, c, CellSize, true);
        var yy = f_PositionInWorld(StartingY, r, CellSize, true);
        var scale = CellSize / sprite_get_width(s_Road);
        
        var IsOnTopBottomBorder = r == 0 or r == NumberOfRows - 1;
        var IsOnLeftRightBorder = c == 0 or c == NumberOfColumns - 1
        var IsOnCorner = IsOnTopBottomBorder and IsOnLeftRightBorder;
        var IsOnBorder = IsOnTopBottomBorder or IsOnLeftRightBorder;
        
        var index = 0;
        var rotation = 0;
        
        if IsOnBorder
        {   
            if IsOnCorner 
            {            
                index = 2;
                
                if r == 0 and c == 0
                {
                    rotation = 0;
                }
                else if r == NumberOfRows - 1 and c == 0
                {
                    rotation = 90;
                }
                else if r == 0 and c - 1
                {
                    rotation = 270;
                }
                else
                {
                    rotation = 180;            
                }
            }
            else if r == 0
            {                
                index = 4;
                rotation = 270;
            }
            else if r == NumberOfRows - 1
            {                
                index = 4;
                rotation = 90;
            }
            else if c == 0
            {                
                index = 4;
                rotation = 0;
            }
            else if c == NumberOfColumns - 1
            {                
                index = 4;
                rotation = 180;
            }
        }
        else
        {            
            index = 0;
        }
        draw_sprite_ext(s_Road, index, xx, yy, 1, 1, rotation, c_white, 1);        
    }
}


draw_sprite_ext(s_CarAlt, car_image_index, carPosX, carPosY, 1, 1, 0, c_white, 1);

/*Buildings*/
for (var r = 1; r &lt; NumberOfRows; r++)
{
    for (var c = 1; c &lt; NumberOfColumns; c++)
    {
        var BuildingX = f_PositionInWorld(StartingX, c, CellSize, false);
        var BuildingY = f_PositionInWorld(StartingY, r + 0.25, CellSize, false);
        //var NewBuilding = instance_create(BuildingX, BuildingY, o_Building); 
        var scale = CellSize / sprite_get_width(s_Building);
        draw_sprite_ext(s_Building, c * r + randomNumber, BuildingX, BuildingY, scale, scale, 0, c_white, 1);   
        //ds_list_add(ListOfBuildings, NewBuilding);
    }
}

   


draw_sprite_ext(s_Logo, 0, room_width * 0.5, room_height * 0.15, 1, 1, 0, c_white, 1);        
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
