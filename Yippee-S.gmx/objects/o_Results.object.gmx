<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = global.ResultsDepth;

timeUntilShow = 0.75;
currentTime = 0;

visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_space)
{    
    f_ChangePhase(phase.init);
    exit;
}

if !visible
{
    currentTime += f_GetDeltaTime();
    
    if currentTime &gt;= timeUntilShow
    {
        visible = true;
        currentTime = timeUntilShow;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CurrentY = y
//Margin = 10


/*draw_set_font(fnt_Countdown)
f_DrawTextAndUpdateCurrentY("NOXP")

draw_set_font(fnt_Countdown)
f_DrawTextAndUpdateCurrentY("A game made for a tutorial.")*/

if f_ButtonPressed("Next Test", global.screen_width * 0.675, global.screen_height * 0.71, 10) 
{
    //go to next level
    f_ChangePhase(phase.init);
}

if f_ButtonPressed("Quit Tests", global.screen_width * 0.325, global.screen_height * 0.71, 10) 
{
    room_goto(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var Margin = 20;
var ButtonText = string(ceil(currentTime));

//Find the corners of our box
var BoxTop = room_height * 0.15; // y - (string_height(ButtonText) * 0.5)//- (Margin * 2.5)
var BoxBottom = room_height * 0.85;
var BoxLeft = room_width * 0.15;
var BoxRight = room_width * 0.875;

draw_set_colour(make_colour_hsv(342,120,56))

//draw_text_transformed(room_width * 0.5, room_height * 0.5, string(ceil(currentTime)), 2, 2, 0);

draw_set_alpha(0.95);
draw_rectangle(BoxLeft,BoxTop,BoxRight,BoxBottom,false);
draw_set_alpha(1);

draw_set_colour(c_white);






//var fontSize = room_width

//var scaleX = room_width / sprite_get_width(s_Results) * 0.75; /// sprite_get_width(s_Results); //) * 0.55;
//var scaleY = room_height / sprite_get_height(s_Results) * 0.75; /// sprite_get_height(s_Results); //) * 0.55;
var resultsX = room_width * 0.5;
var resultsY = room_height * 0.5;
//draw_sprite_ext(s_Results, 0, resultsX, resultsY, scaleX, scaleY, 0, c_white, 1);
//draw_sprite_ext(s_ResultsBg, 0, resultsX, resultsY, room_width * 0.375, room_height * 0.375, 0, c_white, 1);

draw_set_font(fnt_Countdown);
draw_text_transformed(resultsX, resultsY - (room_height * 0.275), "YIPPEE-S v23.8.88", 0.5, 0.5, 0);//, scaleX * 0.5, scaleY * 0.5, 0);
draw_set_font(fnt_Results);
draw_text(resultsX, resultsY - (room_height * 0.2), "[PERFORMANCE REPORT]");//, scaleX * 0.5, scaleY * 0.5, 0);

var bestTimeX = resultsX;
var bestTimeY = resultsY - (room_height * 0.05);
draw_text(bestTimeX - (room_width * 0.175), bestTimeY, "BEST PATH:");//, scaleX * 0.5, scaleY * 0.5, 0);
draw_text(bestTimeX + (room_width * 0.175), bestTimeY, string(global.CityManager.BestTime * 2.5) + " minutes");//, scaleX * 0.5, scaleY * 0.5, 0);

var systemTimeX = bestTimeX;
var systemTimeY = bestTimeY + (room_height * 0.1);
draw_text(systemTimeX - (room_width * 0.175), systemTimeY, "YOUR PATH:");//, scaleX * 0.5, scaleY * 0.5, 0);
draw_text(systemTimeX + (room_width * 0.175), systemTimeY, string(global.CityManager.SelectedPathCost * 2.5) + " minutes");//, scaleX * 0.5, scaleY * 0.5, 0);


if global.CityManager.totalPois &gt; 0
{    
    var optionalX = systemTimeX;
    var optionalY = systemTimeY +( room_height * 0.1);
    draw_text(optionalX - (room_width * 0.15), optionalY, "OPTIONAL POIs:");
    var secGoalX = systemTimeX + room_width * 0.075;
    for (var i = 0; i &lt; global.CityManager.collectedPois; i+=1)
    {
        var markerScale = 0.025 * room_width / sprite_get_width(s_Marker);
        draw_sprite_ext(s_Marker, 0, secGoalX, optionalY + (room_height * 0.0175), markerScale, markerScale, 0, c_blue, 1);
        secGoalX += room_width * 0.05;
    }
    for (var i = 0; i &lt; global.CityManager.totalPois - global.CityManager.collectedPois; i+=1)
    {
        var markerScale = 0.025 * room_width / sprite_get_width(s_Marker);
        draw_sprite_ext(s_Marker, 0, secGoalX, optionalY + (room_height * 0.0175), markerScale, markerScale, 0, c_gray, 1);
        secGoalX += room_width * 0.05;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>1,1</point>
    <point>1,1</point>
  </PhysicsShapePoints>
</object>
