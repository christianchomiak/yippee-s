<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation
global.CityManager = self.id;

random_set_seed(0);
//randomize();

/*if !audio_is_playing(a_BGM)
    audio_play_sound(a_BGM, 1, true);*/

/*Globar variables*/
StreetDepth = 0;
TrafficDepth = -1;
BuildingDepth = -2;
GPSCarDepth = -5;
MarkerDepth = -100;
CityGrid = 0;
//CityGrid = ds_grid_create(1, 1);
SelectedPath = ds_list_create();
ListOfTrafficJams = ds_list_create();
ListOfBuildings = ds_list_create();
ListOfGoals = ds_list_create();

car = instance_create(0, 0, o_Car);

BestTime = 0;

minNumCol = 3;
maxNumCol = 4;

minNumRow = 3;
maxNumRow = 4;

MinTraf = 0.75;//0.5;
MaxTraf = 0.75;//0.5;

minNumGoals = 1;
maxNumGoals = 4;

f_HardLevelReset(0.75, 0.75, irandom_range(minNumRow, maxNumRow), 
                             irandom_range(minNumCol, maxNumCol), 
                             random_range(MinTraf, MaxTraf), 
                             irandom_range(minNumGoals, maxNumGoals)
                 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard input
if keyboard_check_pressed(vk_escape)
{
    game_end();
}
else if keyboard_check_pressed(ord('G'))
{
    global.CityManager.UsingGPSView = !global.CityManager.UsingGPSView;
}
else if keyboard_check_pressed(ord('R'))
{
    game_restart();
}
else if keyboard_check_pressed(vk_space) //if car.HasArrived and 
    f_SoftLevelReset(random_range(MinTraf, MaxTraf), 
                     irandom_range(minNumGoals, maxNumGoals));
else if keyboard_check_pressed(vk_enter)
    f_HardLevelReset(0.75, 0.75, irandom_range(minNumRow, maxNumRow), 
                                 irandom_range(minNumCol, maxNumCol),                                  
                                 random_range(MinTraf, MaxTraf),  
                                 irandom_range(minNumGoals, maxNumGoals)
                     );

/*for (var r = 0; r &lt; 5; r++)
{
    for (var c = 0; c &lt; 7; c++)
    {
        
        CityGrid[c, r]
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PHASES

if global.CityManager.IsSelectionPhase and 
   f_CheckIfAllGoalsAreInPath() // f_CheckIfTileIsInPath(global.CityManager.CityGrid[DestinationColumn, DestinationRow])
{
    global.CityManager.IsSelectionPhase = false;
    global.CityManager.UsingGPSView = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy all dynamic structures
if ds_exists(CityGrid, ds_type_grid)
    ds_grid_destroy(CityGrid);

ds_list_destroy(SelectedPath);
ds_list_destroy(ListOfTrafficJams);
ds_list_destroy(ListOfBuildings);
ds_list_destroy(ListOfGoals);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if global.CityManager.UsingGPSView
{
    f_DrawGrid(StartingX, StartingY, StartingX + NumberOfColumns * CellSize, StartingY + NumberOfRows * CellSize, CellSize, 0, 0, c_black, 1);
    //(s_Destiny, 0, DestinationPositionX, DestinationPositionY);
}
else
{
    for (var r = 0; r &lt; NumberOfRows; r++)
    {
        for (var c = 0; c &lt; NumberOfColumns; c++)
        {
            if (r != 0 and r != NumberOfRows - 1) and (c != 0 and c != NumberOfColumns - 1)
                continue;
        
            var offsetX = 0, offsetY = 0;
            
            if r == 0
                offsetY = -0.25;
            else if r == NumberOfRows - 1            
                offsetY = 0.5;
            else if c == 0
                offsetX = -0.3625;
            else if c == NumberOfColumns - 1            
                offsetX = 0.3625;
            
            var scale = (CellSize / sprite_get_width(s_Tree)) * 0.85;
            var typeOfTree = (r * NumberOfColumns) + c;
            draw_sprite_ext(s_Tree, typeOfTree, f_PositionInWorld(StartingX, c + offsetX, CellSize, true), f_PositionInWorld(StartingY, r + offsetY, CellSize, true), scale, scale, 0, c_white, 1);
        }
    }
    //draw_sprite_ext(s_Marker, 0, DestinationPositionX, DestinationPositionY, 1, 1, 0, c_red, 0.5);
}

    

draw_text(room_width / 2, room_height * 0.025, "Distance: " + string(ds_list_size(global.CityManager.SelectedPath) - 1));
draw_text(room_width / 2, room_height * 0.045, "Time: " + string(global.CityManager.AccumulatedTime));
draw_text(room_width / 2, room_height * 0.065, "Cell size: " + string(global.CityManager.CellSize));

if car.HasArrived
{
    draw_text(room_width / 2, room_height * 0.95, "ARRIVED!");
}

draw_text(room_width * 0.25, room_height * 0.95, "Best: " + string(BestTime));

depth = -10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
